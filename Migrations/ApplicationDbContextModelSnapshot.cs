// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotivTest.Data;

#nullable disable

namespace MotivTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MotivTest.Models.Decloration.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Country_Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Country_Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Россия",
                            ShortName = "RUS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Казахстан",
                            ShortName = "KZ"
                        });
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Department_Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Department_Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Офис обслуживания"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Контакт-Центр"
                        });
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Locality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Locality_Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Locality_Id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("IX_Locality_RId");

                    b.ToTable("Locality");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Екатеринбург",
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Region_Id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_Region_CId");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Region_Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Свердловская область"
                        });
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Request_Id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("IX_Request_DId");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Request_Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Request_UId");

                    b.ToTable("Request");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 10, 21, 5, 8, 8, 867, DateTimeKind.Local).AddTicks(9026),
                            DepartmentId = 2,
                            Name = "Обращение 1",
                            Reason = "Замена номера",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalityId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_User_Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_User_Id");

                    b.HasIndex("LocalityId")
                        .HasDatabaseName("IX_User_LId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocalityId = 1,
                            Name = "Иван",
                            Number = "81112223344",
                            Surname = "Иванов"
                        });
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Locality", b =>
                {
                    b.HasOne("MotivTest.Models.Decloration.Region", "Region")
                        .WithMany("Localities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Locality_RId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Region", b =>
                {
                    b.HasOne("MotivTest.Models.Decloration.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Region_CId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Request", b =>
                {
                    b.HasOne("MotivTest.Models.Decloration.Department", "Department")
                        .WithMany("Requests")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Request_DId");

                    b.HasOne("MotivTest.Models.Decloration.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Request_UId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.User", b =>
                {
                    b.HasOne("MotivTest.Models.Decloration.Locality", "Locality")
                        .WithMany("Users")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_LId");

                    b.Navigation("Locality");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Department", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Locality", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.Region", b =>
                {
                    b.Navigation("Localities");
                });

            modelBuilder.Entity("MotivTest.Models.Decloration.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
